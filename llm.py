import requests
import json
from config import OLLAMA_API_URL, MODEL_NAME, MAX_TOKENS, TEMPERATURE

def text_to_sql(natural_query: str) -> str:
    """
    Convert a natural language query into a valid SQLite SQL query using a locally running Ollama instance.
    This function streams the response and concatenates each chunk into the final SQL query.
    
    Args:
        natural_query (str): The natural language query provided by the user.
    
    Returns:
        str: The complete generated SQLite SQL query.
    
    Raises:
        Exception: If there is an error during the API call or in processing the streamed response.
    """
    # Improved prompt: force SQLite-compatible syntax.
    prompt = (
        "You are an expert SQL generator specialized in SQLite. Convert the following natural language description into a valid SQLite SQL query. "
        "Do not use any SQL Server-specific syntax or functions. Instead, use SQLite operators (for example, '||' for string concatenation) and SQLite functions only. "
        "Avoid referencing system tables such as master..spt_values or using functions like NEWID() or CONVERT(). "
        "Ensure that the entire query is executable on an SQLite database. "
        "Output only the SQL query without any extra text.\n\n"
        f"Natural Language Query: {natural_query}\n\n"
        "SQL Query:"
    )
    
    payload = {
        "model": MODEL_NAME,
        "prompt": prompt,
        "max_tokens": MAX_TOKENS,
        "temperature": TEMPERATURE
    }
    
    try:
        # Send the POST request with streaming enabled.
        response = requests.post(OLLAMA_API_URL, json=payload, stream=True)
        response.raise_for_status()  # Raise an error for any HTTP issues.
        
        sql_parts = []
        # Process the streamed JSON messages.
        for line in response.iter_lines():
            if line:
                try:
                    data = json.loads(line.decode("utf-8"))
                except Exception:
                    continue  # Skip any malformed lines.
                part = data.get("response", "")
                sql_parts.append(part)
                if data.get("done", False):
                    break
        
        # Concatenate all chunks to form the full SQL query.
        full_sql = "".join(sql_parts).strip()
        
        # Remove any markdown code block markers if present.
        if full_sql.startswith("```"):
            full_sql = full_sql.strip("`").strip()
        
        if not full_sql:
            raise ValueError("No SQL query was generated by the LLM.")
        
        return full_sql

    except Exception as e:
        raise Exception(f"Error converting text to SQL: {e}")

# Optional testing block
if __name__ == "__main__":
    sample_query = input("Enter a natural language query: ")
    try:
        sql_output = text_to_sql(sample_query)
        print("Generated SQL Query:")
        print(sql_output)
    except Exception as err:
        print("Error:", err)
